14th August 2022

Task Completed
- Understanding Data Frames in R
- Simple Data Frames func in R

Viewing DF (Similar with Python)
> data("diamonds")
> View(diamonds)
> head(diamonds)

Structure of Data Frames
> str(diamonds)
tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] ..........
 
 View Column Names
 > colnames(diamonds)
 [1] "carat"   "cut"     "color"   "clarity" "depth"   "table"  
 [7] "price"   "x"       "y"       "z"     
 
 Adding New Columns - mutate()
 > mutate(diamonds, carat_2 = carat * 100)
   carat cut  color clarity depth table price     x     y     z carat_2 
   ....
   
CREATING DATA FRAMES
> names <- c("", "", "", "")
> age <- c(1, 2, 3, 4)
> people <- data.frame(names, age)
> View(people)
> head(people)
  names age
1         1
2         2
3         3
4         4
> str(people)
'data.frame':	4 obs. of  2 variables:
 $ names: chr  "" "" "" ""
 $ age  : num  1 2 3 4
> glimpse(people)
Rows: 4
Columns: 2
$ names <chr> "", "", "", ""
$ age   <dbl> 1, 2, 3, 4

TIBBLE Function - Quick Preview of Data Frames
> as_tibble(diamonds)
# A tibble: 53,940 × 10
   carat cut   color clarity depth table price     x     y     z
   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
 1  0.23 Ideal E     SI2      61.5    55   326  3.95  3.98  2.43
 2  0.21 Prem… E     SI1      59.8    61   326  3.89  3.84  2.31
 3  0.23 Good  E     VS1      56.9    65   327  4.05  4.07  2.31
 4  0.29 Prem… I     VS2      62.4    58   334  4.2   4.23  2.63
 5  0.31 Good  J     SI2      63.3    58   335  4.34  4.35  2.75
 6  0.24 Very… J     VVS2     62.8    57   336  3.94  3.96  2.48
 7  0.24 Very… I     VVS1     62.3    57   336  3.95  3.98  2.47
 8  0.26 Very… H     SI1      61.9    55   337  4.07  4.11  2.53
 9  0.22 Fair  E     VS2      65.1    61   337  3.87  3.78  2.49
10  0.23 Very… H     VS1      59.4    61   338  4     4.05  2.39
# … with 53,930 more rows

READR FUNC - For Importing Data
read_csv(): comma-separated values (.csv) files
read_tsv(): tab-separated values files
read_delim(): general delimited files
read_fwf(): fixed-width files
read_table(): tabular files where columns are separated by white-space
read_log(): web log files

The readxl package
To import spreadsheet data into R, you can use the readxl package. 
The readxl package makes it easy to transfer data from Excel into R.

> library(readxl)
> readxl_example()
 [1] "clippy.xls"    "clippy.xlsx"   "datasets.xls" 
 [4] "datasets.xlsx" "deaths.xls"    "deaths.xlsx"  
 [7] "geometry.xls"  "geometry.xlsx" "type-me.xls"  
[10] "type-me.xlsx" 
> readxl_example("deaths.xls")
[1] "/cloud/lib/x86_64-pc-linux-gnu-library/4.2/readxl/extdata/deaths.xls"
> read_excel(readxl_example("deaths.xls"))

------------------------------------------------------------------------------

Data Cleaning with R
- Packages used: here, skimr, janitor, dplyr

Checking NULL values
> library("palmerpenguins")
> skim_without_charts(penguins)
── Data Summary ────────────────────────
                           Values  
Name                       penguins
Number of rows             344     
Number of columns          8       
_______________________            
Column type frequency:             
  factor                   3       
  numeric                  5       
________________________           
Group variables            None    

── Variable type: factor ──────────────────────
  skim_variable n_missing complete_rate ordered
1 species               0         1     FALSE  
2 island                0         1     FALSE  
3 sex                  11         0.968 FALSE 

------------------------------------------------------------------------------

EXCLUDING SELECT USING (-)
penguins %>% 
  select(-species)
# SHOWS ALL COLUMN EXCEPT SPECIES

RENAMING COLUMNS
penguins %>%
  rename(island_new = island)
  
rename_with(penguins, toupper)
rename_with(penguins, tolower)


------------------------------------------------------------------------------

Logical AND (&&) and Element Wise AND (&)

x <- c(3, 5, 7)
y <- c(2, 4, 6)

Then run the code with a single ampersand (&). The output is boolean (TRUE or FALSE).
x < 5 & y < 5
[1]  TRUE FALSE FALSE
# Compares all vector elements

x < 5 && y < 5
[1] TRUE
# Compare only first element

------------------------------------------------------------------------------
SORTING, FILTERING AND GROUPBY
penguins2 <- penguins %>% arrange(-bill_length_mm)
# (-) operator = descending order

> penguins %>% group_by(island) %>% drop_na() %>% summarise(mean_bill_length_mm = mean(bill_length_mm))
# A tibble: 3 × 2
  island    mean_bill_length_mm
  <fct>                   <dbl>
1 Biscoe                   45.2
2 Dream                    44.2
3 Torgersen                39.0

penguins %>% group_by(species, island) %>% drop_na() %>% summarise(mean_bl = mean(bill_length_mm), max_bl = max(bill_length_mm))
`summarise()` has grouped output by 'species'. You can override using the
`.groups` argument.
# A tibble: 5 × 4
# Groups:   species [3]
  species   island    mean_bl max_bl
  <fct>     <fct>       <dbl>  <dbl>
1 Adelie    Biscoe       39.0   45.6
2 Adelie    Dream        38.5   44.1
3 Adelie    Torgersen    39.0   46  
4 Chinstrap Dream        48.8   58  
5 Gentoo    Biscoe       47.6   59.6

> penguins %>% filter(species == "Adelie")

------------------------------------------------------------------------------

DATA MANIPULATION 
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job_title <- c("Professional", "Programmer", "Management", "Clerical", "Developer", "Programmer", "Management", "Clerical", "Developer", "Programmer")
employee <- data.frame(id, name, job_title)

separate(employee, name, into = c("first_name", "last_name"), sep = " ")
# Separate with delimeter

unite(employee1, "combined_name", first_name, last_name, sep = " ")
# Concatanate function in R

------------------------------------------------------------------------------

library("Tmisc")
data("quartet")
View(quartet)

quartet %>% 
  group_by(set) %>% 
  summarise(mean(x), sd(x), mean(y), sd(y), cor(x,y))

------------------------------------------------------------------------------

CHECKING BIAS IN R STUDIO 

install.packages("SimDesign")
library(SimDesign)

actual_temp <- c(68.3, 70, 72, 71, 67, 70)
predicted_temp <- c(67, 69, 71, 70, 67, 69)
bias(actual_temp, predicted_temp)

actual_sales <- c(150, 203, 137, 247, 116, 287)
predicted_sales <- c(200, 300, 150, 250, 300, 500)
bias(actual_sales, predicted_sales)


1 I             9    3.32      7.50    2.03       0.816
2 II            9    3.32      7.50    2.03       0.816
3 III           9    3.32      7.5     2.03       0.816
4 IV            9    3.32      7.50    2.03       0.817
