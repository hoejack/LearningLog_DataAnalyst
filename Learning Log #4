14th August 2022

Task Completed
- Understanding Data Frames in R
- Simple Data Frames func in R

Viewing DF (Similar with Python)
> data("diamonds")
> View(diamonds)
> head(diamonds)

Structure of Data Frames
> str(diamonds)
tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)
 $ carat  : num [1:53940] ..........
 
 View Column Names
 > colnames(diamonds)
 [1] "carat"   "cut"     "color"   "clarity" "depth"   "table"  
 [7] "price"   "x"       "y"       "z"     
 
 Adding New Columns - mutate()
 > mutate(diamonds, carat_2 = carat * 100)
   carat cut  color clarity depth table price     x     y     z carat_2 
   ....
   
CREATING DATA FRAMES
> names <- c("", "", "", "")
> age <- c(1, 2, 3, 4)
> people <- data.frame(names, age)
> View(people)
> head(people)
  names age
1         1
2         2
3         3
4         4
> str(people)
'data.frame':	4 obs. of  2 variables:
 $ names: chr  "" "" "" ""
 $ age  : num  1 2 3 4
> glimpse(people)
Rows: 4
Columns: 2
$ names <chr> "", "", "", ""
$ age   <dbl> 1, 2, 3, 4

TIBBLE Function - Quick Preview of Data Frames
> as_tibble(diamonds)
# A tibble: 53,940 × 10
   carat cut   color clarity depth table price     x     y     z
   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>
 1  0.23 Ideal E     SI2      61.5    55   326  3.95  3.98  2.43
 2  0.21 Prem… E     SI1      59.8    61   326  3.89  3.84  2.31
 3  0.23 Good  E     VS1      56.9    65   327  4.05  4.07  2.31
 4  0.29 Prem… I     VS2      62.4    58   334  4.2   4.23  2.63
 5  0.31 Good  J     SI2      63.3    58   335  4.34  4.35  2.75
 6  0.24 Very… J     VVS2     62.8    57   336  3.94  3.96  2.48
 7  0.24 Very… I     VVS1     62.3    57   336  3.95  3.98  2.47
 8  0.26 Very… H     SI1      61.9    55   337  4.07  4.11  2.53
 9  0.22 Fair  E     VS2      65.1    61   337  3.87  3.78  2.49
10  0.23 Very… H     VS1      59.4    61   338  4     4.05  2.39
# … with 53,930 more rows

READR FUNC - For Importing Data
read_csv(): comma-separated values (.csv) files
read_tsv(): tab-separated values files
read_delim(): general delimited files
read_fwf(): fixed-width files
read_table(): tabular files where columns are separated by white-space
read_log(): web log files

The readxl package
To import spreadsheet data into R, you can use the readxl package. 
The readxl package makes it easy to transfer data from Excel into R.

> library(readxl)
> readxl_example()
 [1] "clippy.xls"    "clippy.xlsx"   "datasets.xls" 
 [4] "datasets.xlsx" "deaths.xls"    "deaths.xlsx"  
 [7] "geometry.xls"  "geometry.xlsx" "type-me.xls"  
[10] "type-me.xlsx" 
> readxl_example("deaths.xls")
[1] "/cloud/lib/x86_64-pc-linux-gnu-library/4.2/readxl/extdata/deaths.xls"
> read_excel(readxl_example("deaths.xls"))
